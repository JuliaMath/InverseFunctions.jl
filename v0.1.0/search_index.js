var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"DocTestSetup  = quote\n    using InverseFunctions\nend","category":"page"},{"location":"api/#Modules","page":"API","title":"Modules","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Order = [:module]","category":"page"},{"location":"api/#Types-and-constants","page":"API","title":"Types and constants","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Order = [:type, :constant]","category":"page"},{"location":"api/#Functions-and-macros","page":"API","title":"Functions and macros","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Order = [:macro, :function]","category":"page"},{"location":"api/#Documentation","page":"API","title":"Documentation","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [InverseFunctions]\nOrder = [:module, :type, :constant, :macro, :function]","category":"page"},{"location":"api/#InverseFunctions.InverseFunctions","page":"API","title":"InverseFunctions.InverseFunctions","text":"InverseFunctions\n\nLightweight package that defines an interface to invert functions.\n\n\n\n\n\n","category":"module"},{"location":"api/#InverseFunctions.inverse","page":"API","title":"InverseFunctions.inverse","text":"inverse(f)\n\nReturns the inverse of a function f.\n\nThe following conditions must be satisfied:\n\ninverse(f) ∘ f must be equivalent to identity.\ninverse(f)(f(x)) ≈ x\ninverse(inverse(f)) must be equivalent (ideally identical) to f.\n\ninverse supports mapped/broadcasted functions (via Base.Fix1) and (on Julia >=v1.6) function composition.\n\nExample:\n\nfoo(x) = inv(exp(-x) + 1)\ninv_foo(y) = log(y / (1 - y))\n\nInverseFunctions.inverse(::typeof(foo)) = inv_foo\nInverseFunctions.inverse(::typeof(inv_foo)) = foo\n\nx = 4.2\n@assert inverse(foo)(foo(x)) ≈ x\n@assert inverse(inverse(foo)) == foo\n\nX = rand(10)\nbroadcasted_foo = Base.Fix1(broadcast, foo)\nY = broadcasted_foo(X)\n@assert inverse(broadcasted_foo)(Y) ≈ X\n\n# Requires Julia >= v1.6:\nbar = log ∘ foo\n@assert inverse(bar)(bar(x)) ≈ x\n\n\n\n\n\n","category":"function"},{"location":"LICENSE/#LICENSE","page":"LICENSE","title":"LICENSE","text":"","category":"section"},{"location":"LICENSE/","page":"LICENSE","title":"LICENSE","text":"using Markdown\nMarkdown.parse_file(joinpath(@__DIR__, \"..\", \"..\", \"LICENSE.md\"))","category":"page"},{"location":"#InverseFunctions.jl","page":"Home","title":"InverseFunctions.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package defines the function inverse. inverse(f) returns the inverse function of a function f, so that inverse(f)(f(x)) ≈ x.","category":"page"},{"location":"","page":"Home","title":"Home","text":"inverse supports mapped/broadcasted functions (via Base.Fix1) and (on Julia >=v1.6) function composition.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Implementations of inverse(f) for identity, inv, adjoint and transpose as well as for exp, log, exp2, log2, exp10, log10, expm1 and log1p are included.","category":"page"}]
}
